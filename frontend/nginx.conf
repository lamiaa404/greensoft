# nginx kann automatisch bestimmen wie viele prozesse es braucht
worker_processes auto;

events {
  worker_connections 1024;
}

http {
  # beschleunigt das senden von dateien auf linux
  # über den sendfile() syscall
  sendfile on;
  # macht gzip transport compression an
  gzip on;
  
  # damit dateitypen richtig angezeigt werden vom browser
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  server {
    # dieser server hört auf unsere domain
    server_name goeppert013.informatik.intern.uni-leipzig.de;
    # in der Dockerfile haben wir dorthin unsere gebaute vue
    # anwendung kopiert
    root /usr/share/nginx/html;
    index index.html;
    # auf port 80 (standard http) listenen
    listen 80 default_server;
    
    location / {
      try_files $uri $uri/ /index.html;
    }

    # leitet alle anfragen auf /api an das spring backend weiter
    location /api/ {
      # http header die man in der regel bei http proxys setzt
      # mehr info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $remote_addr;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_hide_header Upgrade;
      proxy_redirect off;

      proxy_read_timeout 600;
      proxy_connect_timeout 600;
      proxy_send_timeout 600;
      send_timeout 600;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # das ist die wichtige zeile, sie sagt nginx
      # die anfragen an das backend weiterzuleiten
      # der name spring-backend wird von docker dann
      # innerhalb des docker netzwerks auf den backend
      # container aufgelöst
      proxy_pass http://spring-backend:8080/;
    }
  }
  server { # no direct ip access
    # leitet user weiter wenn direkt auf die ip zugegriffen wird
    # direkt auf ips zugreifen ist design-technisch in der regel
    # nicht so schön
    listen 80;
    server_name 192.168.34.158;
    
    # sendet http code 301 (moved permanently)
    return 301 http://goeppert013.informatik.intern.uni-leipzig.de;
  }
}
